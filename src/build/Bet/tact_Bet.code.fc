#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Bet.headers.fc";
#include "tact_Bet.stdlib.fc";
#include "tact_Bet.constants.fc";
#include "tact_Bet.storage.fc";

;;
;; Contract Bet functions
;;

(slice, int, slice, slice, int, slice, int) $Bet$_contract_init(slice $parent, int $seqno, slice $owner) impure inline_ref {
    var (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created)) = (null(), null(), null(), null(), null(), null(), null());
    $self'parent = $parent;
    $self'seqno = $seqno;
    $self'chosenTeam = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    $self'hackatonPosition = 0;
    $self'buildLink = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    $self'owner = $owner;
    $self'created = false;
    return ($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created);
}

((slice, int, slice, slice, int, slice, int), (slice, int, slice)) $Bet$_fun_betDetails((slice, int, slice, slice, int, slice, int) $self) impure inline_ref {
    var (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created)) = $self;
    return (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created), $BetDetails$_constructor_chosenTeam_hackatonPosition_buildLink($self'chosenTeam, $self'hackatonPosition, $self'buildLink));
}

((slice, int, slice, slice, int, slice, int), slice) $Bet$_fun_owner((slice, int, slice, slice, int, slice, int) $self) impure inline_ref {
    var (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created)) = $self;
    return (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created), $self'owner);
}

;;
;; Receivers of a Contract Bet
;;

(((slice, int, slice, slice, int, slice, int)), ()) $Bet$_internal_binary_InternalSetBet((slice, int, slice, slice, int, slice, int) $self, (slice, int, slice, slice) $msg) impure inline {
    var ($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created) = $self;
    var ($msg'chosenTeam, $msg'hackatonPosition, $msg'buildLink, $msg'owner) = $msg;
    throw_unless(59861, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    throw_unless(9826, (~ $self'created));
    $self'chosenTeam = $msg'chosenTeam;
    $self'hackatonPosition = $msg'hackatonPosition;
    $self'buildLink = $msg'buildLink;
    $self'owner = $msg'owner;
    $self'created = true;
    return (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created), ());
}

(((slice, int, slice, slice, int, slice, int)), ()) $Bet$_internal_binary_InternalCloseBet((slice, int, slice, slice, int, slice, int) $self, (slice) $msg) impure inline {
    var ($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created) = $self;
    var ($msg'excess) = $msg;
    throw_unless(23695, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode($msg'excess, 0, 66));
    return (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created), ());
}

(((slice, int, slice, slice, int, slice, int)), ()) $Bet$_internal_binary_Deploy((slice, int, slice, slice, int, slice, int) $self, (int) $deploy) impure inline {
    var ($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created)~$Bet$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'parent, $self'seqno, $self'chosenTeam, $self'buildLink, $self'hackatonPosition, $self'owner, $self'created), ());
}

;;
;; Get methods of a Contract Bet
;;

_ %betDetails() method_id(72585) {
    var self = $Bet$_contract_load();
    var res = self~$Bet$_fun_betDetails();
    return $BetDetails$_to_external(res);
}

_ %owner() method_id(83229) {
    var self = $Bet$_contract_load();
    var res = self~$Bet$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmYY3onD9bhM37EYPkiMdUvqr1jumUHzfnrh1dkLyXrdWv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Bet
;;

((slice, int, slice, slice, int, slice, int), int) $Bet$_contract_router_internal((slice, int, slice, slice, int, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalSetBet message
    if (op == 1640874180) {
        var msg = in_msg~$InternalSetBet$_load();
        self~$Bet$_internal_binary_InternalSetBet(msg);
        return (self, true);
    }
    
    ;; Receive InternalCloseBet message
    if (op == 3704320609) {
        var msg = in_msg~$InternalCloseBet$_load();
        self~$Bet$_internal_binary_InternalCloseBet(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Bet$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Bet$_contract_load();
    
    ;; Handle operation
    int handled = self~$Bet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Bet$_contract_store(self);
}
